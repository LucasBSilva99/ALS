# -*- coding: utf-8 -*-
"""cnn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o-EPqBTHVqVEMfvXDficqw8l_veQ7eWp
"""

import pandas as pd
import  numpy as np
import seaborn as sns

from sklearn.ensemble import ExtraTreesClassifier
import matplotlib.pyplot as plt
from sklearn.feature_selection import f_regression

def tree_classifier_selec(X, y, n):
  model = ExtraTreesClassifier(n_estimators=10)
  model.fit(X, y)

  #plot graph of feature importances for better visualization
  feat_importances = pd.Series(model.feature_importances_, index=X.columns)
  print(feat_importances.nlargest(n))
  feat_importances.nlargest(n).plot(kind='barh')
  plt.show()

# inputs:
#    X: pandas.DataFrame, features
#    y: pandas.Series, target variable
#    K: number of features to select

def f_regression_selec(X, y, k):

  # compute F-statistics and initialize correlation matrix
  F = pd.Series(f_regression(X, y['Evolution'])[0], index = X.columns)
  corr = pd.DataFrame(.00001, index = X.columns, columns = X.columns)
  K = k
  # initialize list of selected features and list of excluded features
  selected = []
  not_selected = X.columns.to_list()

  # repeat K times
  for i in range(K):
    
      # compute (absolute) correlations between the last selected feature and all the (currently) excluded features
      if i > 0:
          last_selected = selected[-1]
          corr.loc[not_selected, last_selected] = X[not_selected].corrwith(X[last_selected]).abs().clip(.00001)
          
      # compute FCQ score for all the (currently) excluded features (this is Formula 2)
      score = F.loc[not_selected] / corr.loc[not_selected, selected].mean(axis = 1).fillna(.00001)
      
      # find best feature, add it to selected and remove it from not_selected
      best = score.index[score.argmax()]
      selected.append(best)
      not_selected.remove(best)

      return selected, not_selected

def feature_corr(X):
  #get correlations of each features in dataset
  corrmat = X.corr()
  top_corr_features = corrmat.index
  plt.figure(figsize=(20,20))
  #plot heat map
  g=sns.heatmap(X[top_corr_features].corr(),annot=True,cmap="RdYlGn")